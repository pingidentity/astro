@Library(['mpl-library', 'jenkins-ci-library']) _
// https://gitlab.corp.pingidentity.com/devtools/icecream/jenkins-mpl-library
// https://gitlab.corp.pingidentity.com/devtools/icecream/jenkins-ci-library

def uiPipelineShared = libraryResource 'podTemplates/ui-pipeline-shared.yaml';
def centralCluster = 'central-us-east-2-k8s'

pipeline {
  agent {
    kubernetes {
      cloud centralCluster
      yaml uiPipelineShared
    }
  }
  stages {
    stage('run-tests') {
      steps {
        dir("${env.WORKSPACE}/packages/astro") {
          container('node-builder') {
            echo "Running astro linting and tests"
            sh "yarn install --frozen-lockfile --ignore-engines"
            sh "cd ../icons && yarn build"
            sh "yarn run lint"
            sh "yarn run test"
            sh "npm version minor"
          }
        }
      }
    }

    stage('version, tag and commit') {
      steps {
        dir ("${env.WORKSPACE}/packages/astro") {
          container('node-builder') {

            script {
              env.RELEASE_VERSION = sh(returnStdout: true, script: $/echo $(node -p -e "require('.\/package.json').version")/$).trim();
              env.GIT_RELEASE_TAG = "@pingux/astro@${env.RELEASE_VERSION}"
            }
            echo """
              release version: ${env.RELEASE_VERSION}
              git tag: ${env.GIT_RELEASE_TAG}
            """
            withCredentials([
              sshUserPrivateKey(credentialsId: "jenkins-build-user", keyFileVariable: 'bldUserKeyPath')
            ]){

            sh """
                git add package.json
                git add ../../yarn.lock
                git config --global user.email 'devtools+jenkins@pingidentity.com'
                git config --global user.name 'devtools-jenkins'

                git commit -m 'Astro ${params.VERSION_TYPE}: ${env.RELEASE_VERSION}'
                GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no -i ${bldUserKeyPath}' git push origin ${params.RELEASE_BRANCH}

                git tag ${env.GIT_RELEASE_TAG}
                GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -i ${bldUserKeyPath}" git push origin ${env.GIT_RELEASE_TAG}
            """
            }

          }
        }
      }
    }
    stage('yarn-publish') {
      steps {
        dir("${env.WORKSPACE}/packages/astro/") {
          container('node-builder') {
            echo "Building & publishing"
            configFileProvider([configFile(fileId: 'NPM_SETTINGS_FOR_ART01', targetLocation: '.npmrc')]) {
              sh "yarn build"
              sh "npm publish"
            }
          }
        }
      }
    }
    stage('update-demo') {
      steps {
        dir("${env.WORKSPACE}/packages/astro") {
          container('node-builder'){
            withCredentials([sshUserPrivateKey(credentialsId: "uilibrary.ping-eng.com-ubuntu-user", keyFileVariable: 'keyfile')]) {
              sh "make PRIVATE_SSH_KEY_PATH=${keyfile} LIB_VERSION=astro package-and-upload-astro"
            }
          }
        }
      }
    }
  }
  post {
    success {
       slackSend channel: '#ux-deployments', message: "@here :verynice: Great Success! Astro ${env.RELEASE_VERSION} has been released ${BUILD_URL}. Demo site is available at https://uilibrary.ping-eng.com/astro.", color: "#4aba78"
       slackSend channel: '#ui-announcements', message: "@here Astro ${env.RELEASE_VERSION} has been released ${BUILD_URL}. Demo site is available at https://uilibrary.ping-eng.com/astro.", color: "#4aba78"
       slackSend channel: '#ui-astro', message: "@here Astro ${env.RELEASE_VERSION} has been released ${BUILD_URL}. Demo site is available at https://uilibrary.ping-eng.com/astro.", color: "#4aba78"
    }
    unsuccessful {
       slackSend channel: '#ux-deployments', message: "@here Astro deploy failed! ${BUILD_URL}", color: "#a31300"
    }

    cleanup {
        cleanWs()
    }
  }
}
