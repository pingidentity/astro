@Library(['mpl-library', 'jenkins-ci-library']) _
// https://gitlab.corp.pingidentity.com/devtools/icecream/jenkins-mpl-library
// https://gitlab.corp.pingidentity.com/devtools/icecream/jenkins-ci-library

def prodCdnDeploy = libraryResource 'com/icecream/central-cluster-agent-definitions/prod-cdn-deploy.yaml';
def uiPipelineShared = libraryResource 'com/icecream/central-cluster-agent-definitions/ui-pipeline-shared.yaml';
def centralCluster = 'central-us-east-2-k8s'

pipeline {
  agent {
    kubernetes {
      cloud centralCluster
      yaml uiPipelineShared
    }
  }
  environment {
    PATH_TO_PACKAGE_JSON = "packages/end-user"
    PING_TEAM_NAME = "ux"
    PING_SERVICE_NAME = "end-user"
  }
  stages {
    stage('run-tests') {
      steps {
        dir("${env.WORKSPACE}/packages/end-user") {
          container('node-builder') {
            echo "Running end-user linting and tests"
            sh "yarn install --ignore-engines"
            //sh "yarn run lint"
            //sh "yarn run coverage"
          }
        }
      }
    }
    stage('version, tag and commit') {
      steps {
        dir ("${env.WORKSPACE}/packages/end-user") {
          container('node-builder') {
            echo "Incrementing the version: ${params.VERSION_TYPE}"
            sh "yarn version --${params.VERSION_TYPE} --no-git-tag-version"
            script {
              env.RELEASE_VERSION = sh(returnStdout: true, script: $/echo $(node -p -e "require('.\/package.json').version")/$).trim();
              env.GIT_RELEASE_TAG = "end-user-${env.RELEASE_VERSION}"
            }
            echo """
              release version: ${env.RELEASE_VERSION}
              git tag: ${env.GIT_RELEASE_TAG}
            """
            withCredentials([
              sshUserPrivateKey(credentialsId: "jenkins-build-user", keyFileVariable: 'bldUserKeyPath')
            ]){
              sh  """
                git add package.json
                git config --global user.email 'devtools+jenkins@pingidentity.com'
                git config --global user.name 'devtools-jenkins'
                git commit -m 'End user ${params.VERSION_TYPE}: ${env.RELEASE_VERSION}'
                GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no -i ${bldUserKeyPath}' git push origin ${params.RELEASE_BRANCH}

                git tag ${env.GIT_RELEASE_TAG}
                GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -i ${bldUserKeyPath}" git push origin ${env.GIT_RELEASE_TAG}
              """
            }
          }
        }
      }
    }
    stage('yarn-publish') {
      steps {
        dir("${env.WORKSPACE}/packages/end-user") {
          container('node-builder') {
            echo "Building & publishing"
            configFileProvider([configFile(fileId: 'NPM_SETTINGS_FOR_ART01', targetLocation: '.npmrc')]) {
              sh "yarn run dist"
              sh "cd dist && yarn publish"
            }
          }
        }
        stash includes: 'packages/end-user/**/*', name: 'package'
      }
      post {
        always {
          archiveArtifacts artifacts: "packages/end-user/cdn/**", fingerprint: true
        }
      }
    }
    stage('cdn deploy prod') {
      agent {
        kubernetes {
          cloud centralCluster
          yaml prodCdnDeploy
        }
      }
      environment{
        ENVIRONMENT = "production"
        CDN_SOURCE = "packages/end-user/cdn/${env.RELEASE_VERSION}"
        UNIQUE_CDN_FOLDER = "${env.RELEASE_VERSION}"
      }
      steps {
        container('cdn-deploy') {
          checkout scm
          unstash 'package'
          sh 'upload_ui'
        }
      }
    }

    stage('update-library-demo') {
      steps {
        dir("${env.WORKSPACE}/packages/end-user") {
          container('node-builder'){
            withCredentials([sshUserPrivateKey(credentialsId: "uilibrary.ping-eng.com-ubuntu-user", keyFileVariable: 'keyfile')]) {
              sh "make PRIVATE_SSH_KEY_PATH=${keyfile} LIB_VERSION=${env.RELEASE_VERSION} package-and-upload-end-user"
            }
          }
        }
      }
    }
  }
  post {
    success {
       slackSend channel: '#ux-deployments', message: ":verynice: Great Success! End-User ${env.RELEASE_VERSION} has been released ${BUILD_URL}.", color: "#4aba78"
       slackSend channel: '#ui-announcements', message: "@here End-User ${env.RELEASE_VERSION} has been released.", color: "#4aba78"
       slackSend channel: '#ui-end-user', message: "@here End-User ${env.RELEASE_VERSION} has been released.", color: "#4aba78"
    }
    unsuccessful {
       slackSend channel: '#ux-deployments', message: "@here ${BUILD_URL} failed!", color: "#a31300"
    }

    cleanup {
        cleanWs()
    }
  }
}
