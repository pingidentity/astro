#!/usr/bin/env groovy
@Library(['jenkins-ci-library']) _
// https://gitlab.corp.pingidentity.com/devtools/icecream/jenkins-ci-library

def centralCluster = 'central'
def testCluster = 'test'

pipeline {
  agent {
    kubernetes(agentDefinition(
      name: 'ui-pipeline-shared',
      cloud: centralCluster
    ))
  }
  environment{
    PATH_TO_PACKAGE_JSON = "packages/ui-library"
    PING_TEAM_NAME = "ux"
    PING_SERVICE_NAME = "ui-library"
  }
  stages {

    stage('version') {
      steps {
        dir ("${env.WORKSPACE}/packages/ui-library") {
          container('node-builder') {
            sh "npm install"
            script {
              env.VERSION_V = sh(returnStdout: true, script: "npm version minor --no-git-tag-version");
              env.VERSION = env.VERSION_V.replaceAll("v","").trim();
              env.FEATURE_NAME = params.UI ?: params.BUILD_BRANCH
              env.SNAPSHOT_VERSION = "${env.VERSION}-${env.FEATURE_NAME}-BETA"
            }
            echo """
              SNAPSHOT version: ${env.SNAPSHOT_VERSION}.${env.BUILD_NUMBER}
            """
          }
        }
      }
    }


    stage('npm-publish') {
      steps {
          dir("${env.WORKSPACE}/packages/ui-library") {
           container('node-builder') {
            configFileProvider([configFile(fileId: 'NPM_SETTINGS_FOR_ART01', targetLocation: '.npmrc')]) {
              echo "publishing UI Library: ${env.SNAPSHOT_VERSION}.${env.BUILD_NUMBER} "
              sh """
                npm run package-library

                npm run build-css
                mkdir cdn/${env.SNAPSHOT_VERSION}
                mv cdn/css cdn/${env.SNAPSHOT_VERSION}

                cp -rf src/images cdn/${env.SNAPSHOT_VERSION}
                cp -rf src/fonts cdn/${env.SNAPSHOT_VERSION}

                npm version ${env.SNAPSHOT_VERSION}.${env.BUILD_NUMBER} --no-git-tag-version
                npm publish --tag feature
              """
            }
          }
        }
        stash includes: 'packages/ui-library/**/*', name: 'package'
      }
      post {
        always {
          archiveArtifacts artifacts: "packages/ui-library/cdn/**", fingerprint: true
        }
      }
    }

    stage('cdn deploy test') {
      agent {
        kubernetes(agentDefinition(
          name: 'test-cdn-deploy',
          cloud: testCluster
        ))
      }
      environment{
        ENVIRONMENT = "test"
        CDN_SOURCE = "packages/ui-library/cdn/${env.SNAPSHOT_VERSION}"
        UNIQUE_CDN_FOLDER = "${env.SNAPSHOT_VERSION}"
      }
      steps {
        container('cdn-deploy') {
          checkout scm
          unstash 'package'
          sh 'upload_ui'
        }
      }
    }

    stage('cdn deploy ort') {
      agent {
        kubernetes(agentDefinition(
          name: 'ort-cdn-deploy',
          cloud: centralCluster
        ))
      }
      environment{
        ENVIRONMENT = "staging"
        CDN_SOURCE = "packages/ui-library/cdn/${env.SNAPSHOT_VERSION}"
        UNIQUE_CDN_FOLDER = "${env.SNAPSHOT_VERSION}"
      }
      steps {
        container('cdn-deploy') {
          checkout scm
          unstash 'package'
          sh 'upload_ui'
        }
      }
    }

    stage('cdn deploy prod') {
      agent {
        kubernetes(agentDefinition(
          name: 'prod-cdn-deploy',
          cloud: centralCluster
        ))
      }
      environment{
        ENVIRONMENT = "production"
        CDN_SOURCE = "packages/ui-library/cdn/${env.SNAPSHOT_VERSION}"
        UNIQUE_CDN_FOLDER = "${env.SNAPSHOT_VERSION}"
      }
      steps {
        container('cdn-deploy') {
          checkout scm
          unstash 'package'
          sh 'upload_ui'
        }
      }
    }
  }
  post {
    unsuccessful {
       slackSend channel: '#ux-deployments', message: "@here :tears: UI Library build-job:  ${BUILD_URL} failed!", color: "#a31300"
    }

    cleanup {
        cleanWs()
    }
  }
}
