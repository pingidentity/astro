@Library(['mpl-library', 'jenkins-ci-library']) _
// https://gitlab.corp.pingidentity.com/devtools/icecream/jenkins-mpl-library
// https://gitlab.corp.pingidentity.com/devtools/icecream/jenkins-ci-library

def ortCdnDeploy = libraryResource 'com/icecream/central-cluster-agent-definitions/ort-cdn-deploy.yaml';
def prodCdnDeploy = libraryResource 'com/icecream/central-cluster-agent-definitions/prod-cdn-deploy.yaml';
def uiPipelineShared = libraryResource 'com/icecream/central-cluster-agent-definitions/ui-pipeline-shared.yaml';
def centralCluster = 'central-us-east-2-k8s'

pipeline {
  agent {
    kubernetes {
      cloud centralCluster
      yaml uiPipelineShared
    }
  }
  environment {
    JIRA_CREDS = credentials('jira-creds')
  }
  stages {
     stage('run-tests') {
      steps {
        dir("${env.WORKSPACE}/packages/ui-library") {
          container('node-builder') {
            echo "Running ui-library linting and tests"
            sh "yarn install --frozen-lockfile --ignore-engines"
            sh "yarn run lint"
            sh "yarn run coverage-ci"
          }
        }
      }
    }
    stage('version, tag and commit') {
      steps {
        dir ("${env.WORKSPACE}/packages/ui-library") {
          container('node-builder') {
            echo "Incrementing the version: ${params.VERSION_TYPE}"
            sh "yarn version --${params.VERSION_TYPE} --no-git-tag-version"
            script {
              env.RELEASE_VERSION = sh(returnStdout: true, script: $/echo $(node -p -e "require('.\/package.json').version")/$).trim();
              env.GIT_RELEASE_TAG = "ui-library-${env.RELEASE_VERSION}"
            }
            echo """
              release version: ${env.RELEASE_VERSION}
              git tag: ${env.GIT_RELEASE_TAG}
            """
            withCredentials([
              sshUserPrivateKey(credentialsId: "jenkins-build-user", keyFileVariable: 'bldUserKeyPath')
            ]){
              sh  """

              """
              sleep 100 //wait 10 seconds for git push to trigger build job

              sh """
                  git add package.json
                  git add ../../yarn.lock
                  git config --global user.email 'devtools+jenkins@pingidentity.com'
                  git config --global user.name 'devtools-jenkins'

                  git commit -m 'UI Library ${params.VERSION_TYPE}: ${env.RELEASE_VERSION}'
                  GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no -i ${bldUserKeyPath}' git push origin ${params.RELEASE_BRANCH}

                  git tag ${env.GIT_RELEASE_TAG}
                  GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no -i ${bldUserKeyPath}" git push origin ${env.GIT_RELEASE_TAG}
                """
            }
          }
        }
      }
    }
    stage('yarn-publish') {
      steps {
        dir("${env.WORKSPACE}/packages/ui-library") {
          container('node-builder') {
            echo 'Building & publishing ui-library'
            configFileProvider([configFile(fileId: 'NPM_SETTINGS_FOR_ART01', targetLocation: '.npmrc')]) {
              sh """
                yarn run package-library
                make CDN_VERSION=${env.RELEASE_VERSION} build-cdn-assets
                yarn publish;
              """
            }
          }
        }
        stash includes: 'packages/ui-library/**/*', name: 'package'
     }
      post {
          always {
            archiveArtifacts artifacts: "packages/ui-library/cdn/**", fingerprint: true
          }
        }
    }
    stage('update-library-demo') {
      when {
        expression { params.RELEASE_BRANCH != 'master'	}
      }
      steps {
        dir("${env.WORKSPACE}/packages/ui-library") {
          container('node-builder'){
            withCredentials([sshUserPrivateKey(credentialsId: "uilibrary.ping-eng.com-ubuntu-user", keyFileVariable: 'keyfile')]) {
              sh "make PRIVATE_SSH_KEY_PATH=${keyfile} LIB_VERSION=${env.RELEASE_VERSION} package-and-upload-for-hosting"
            }
          }
        }
      }

    }
    stage('cdn deploy test') {
      agent { label 'test-cdn-deploy' }
      steps {
        unstash 'package'
        dir("${env.WORKSPACE}/packages/ui-library") {
          container('cdn-deploy') {
            withAWS(region: 'us-east-2', role: 'test-cdn-deploy-role', roleAccount: '208980577242') {
              s3Upload(bucket:'pingidentity-test-assets-us-east-2', path:'ux/ui-library/', file: "cdn/")
            }
          }
        }
      }
    }

    stage('cdn deploy ort') {
      agent {
        kubernetes {
          cloud centralCluster
          yaml ortCdnDeploy
        }
      }
      steps {
        unstash 'package'
        dir("${env.WORKSPACE}/packages/ui-library") {
          container('cdn-deploy') {
            withAWS(region: 'us-east-2', role: 'ort-cdn-deploy-role', roleAccount: '208980577242') {
              s3Upload(bucket:'pingidentity-staging-assets-us-east-2', path:'ux/ui-library/', file: "cdn/")
            }
          }
        }
      }
    }

    stage('cdn deploy prod') {
      agent {
        kubernetes {
          cloud centralCluster
          yaml prodCdnDeploy
        }
      }
      steps {
        unstash 'package'
        dir("${env.WORKSPACE}/packages/ui-library") {
          container('cdn-deploy') {
            withAWS(region: 'us-east-2', role: 'prod-cdn-deploy-role', roleAccount: '208980577242') {
              s3Upload(bucket:'pingidentity-prod-assets-us-east-2', path:'ux/ui-library/', file: "cdn/")
            }
          }
        }
      }
    }
  }
  post {
    success {
        slackSend channel: '#ux-deployments', message: "@here :verynice: Great Success! UI Library ${env.RELEASE_VERSION} has been released. ${BUILD_URL} ", color: "#4aba78"
        slackSend channel: '#ui-coalition', message: "@here UI Library ${env.RELEASE_VERSION} has been released.", color: "#4aba78"
        slackSend channel: '#ui-announcements', message: "@here UI Library ${env.RELEASE_VERSION} has been released.", color: "#4aba78"
    }
    unsuccessful {
      slackSend channel: '#ux-deployments', message: "@here :tears: UI Library build-job:  ${BUILD_URL} failed! ${env.RELEASE_VERSION} has not been released", color: "#a31300"
    }

    cleanup {
        cleanWs()
    }
  }
}
