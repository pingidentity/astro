#!/usr/bin/env groovy
@Library(['jenkins-ci-library']) _
// https://gitlab.corp.pingidentity.com/devtools/icecream/jenkins-ci-library

def centralCluster = 'central'
def testCluster = 'test'

pipeline {
  agent {
    kubernetes(agentDefinition(
      name: 'ui-pipeline-shared',
      cloud: centralCluster
    ))
  }
  environment{
    PATH_TO_PACKAGE_JSON = "packages/ui-library"
    PING_TEAM_NAME = "ux"
    PING_SERVICE_NAME = "ui-library"
  }
  stages {
    stage('version') {
      steps {
        dir ("${env.WORKSPACE}/packages/ui-library") {
          container('node-builder') {
            echo "Building SNAPSHOT"
            sh "yarn version --minor --no-git-tag-version"
            script {
              env.VERSION = sh(returnStdout: true, script: $/echo $(node -p -e "require('.\/package.json').version")/$).trim();
              env.SNAPSHOT_VERSION = "${env.VERSION}-SNAPSHOT"
            }
            echo """
              SNAPSHOT version: ${env.SNAPSHOT_VERSION}.${env.BUILD_NUMBER}
            """
          }
        }
      }
    }

    stage ('package and upload for hosting') {
      steps {
        dir("${env.WORKSPACE}/packages/ui-library") {
          container('node-builder') {
            configFileProvider([configFile(fileId: 'NPM_SETTINGS_FOR_ART01', targetLocation: '.npmrc')]) {
              withCredentials([sshUserPrivateKey(credentialsId: "uilibrary.ping-eng.com-ubuntu-user", keyFileVariable: 'keyfile')]) {
                sh """
                    make PRIVATE_SSH_KEY_PATH=${keyfile} LIB_VERSION=${env.VERSION} package-and-upload-for-hosting
                    make CDN_VERSION=${env.SNAPSHOT_VERSION} build-cdn-assets
                  """
              }
            }
          }
        }
        stash includes: 'packages/ui-library/**/*', name: 'package'
      }

    }

    stage('yarn-publish') {
      steps {
          dir("${env.WORKSPACE}/packages/ui-library") {
           container('node-builder') {
            configFileProvider([configFile(fileId: 'NPM_SETTINGS_FOR_ART01', targetLocation: '.npmrc')]) {
              echo "publishing UI Library: ${env.SNAPSHOT_VERSION} "
              sh """
                yarn run package-library
                yarn version --new-version ${env.SNAPSHOT_VERSION}.${env.BUILD_NUMBER} --no-git-tag-version
                yarn publish --tag snapshot
              """
            }
          }
        }
        stash includes: 'packages/ui-library/**/*', name: 'package'
      }
      post {
        always {
          archiveArtifacts artifacts: "packages/ui-library/cdn/**", fingerprint: true
        }
      }
    }

    stage('cdn deploy test') {
      agent {
        kubernetes(agentDefinition(
          name: 'test-cdn-deploy',
          cloud: testCluster
        ))
      }
      environment{
        ENVIRONMENT = "test"
        CDN_SOURCE = "packages/ui-library/cdn/${env.SNAPSHOT_VERSION}"
        UNIQUE_CDN_FOLDER = "${env.SNAPSHOT_VERSION}"
      }
      steps {
        container('cdn-deploy') {
          checkout scm
          unstash 'package'
          sh 'upload_ui'
        }
      }
    }

    stage('cdn deploy ort') {
      agent {
        kubernetes(agentDefinition(
          name: 'ort-cdn-deploy',
          cloud: centralCluster
        ))
      }
      environment{
        ENVIRONMENT = "staging"
        CDN_SOURCE = "packages/ui-library/cdn/${env.SNAPSHOT_VERSION}"
        UNIQUE_CDN_FOLDER = "${env.SNAPSHOT_VERSION}"
      }
      steps {
        container('cdn-deploy') {
          checkout scm
          unstash 'package'
          sh 'upload_ui'
        }
      }
    }

    stage('cdn deploy prod') {
      agent {
        kubernetes(agentDefinition(
          name: 'prod-cdn-deploy',
          cloud: centralCluster
        ))
      }
      environment{
        ENVIRONMENT = "production"
        CDN_SOURCE = "packages/ui-library/cdn/${env.SNAPSHOT_VERSION}"
        UNIQUE_CDN_FOLDER = "${env.SNAPSHOT_VERSION}"
      }
      steps {
        container('cdn-deploy') {
          checkout scm
          unstash 'package'
          sh 'upload_ui'
        }
      }
    }
  }
  post {
    unsuccessful {
       slackSend channel: '#ux-deployments', message: "@here :tears: UI Library build-job:  ${BUILD_URL} failed!", color: "#a31300"
    }

    cleanup {
        cleanWs()
    }
  }
}
