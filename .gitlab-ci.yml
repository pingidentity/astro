# NOTE: The numerical suffix in the image string refers to the version of the docker image
# this number will need to be incremented (i.e. 1.1 to 1.2), when changes to a package
# require a new docker image to be consistently pulled.

variables:
  STABLE_IMAGE: "docker.corp.pingidentity.com:5000/testing/ui-library-admin:1.2"
  LATEST_IMAGE: "docker.corp.pingidentity.com:5000/testing/pingux-latest:1.2"

stages:
  - build-ci-image
  - build-test-lint
  - screenshot
  - deploy

.yarn-install-and-build: &yarn-install-and-build
  before_script:
    - yarn --frozen-lockfile

# NOTE: Make and test changes to the "latest" image _before_ merging them to the stable one. Otherwise, all
# pipelines will be impacted because they use the stable image for running scripts.
build_ci_stable_image:
  stage: build-ci-image
  rules:
    - changes:
      - shared/docker/stable/Dockerfile
  script:
    - docker build --pull --tag "$STABLE_IMAGE" ./shared/docker/stable
    - docker push "$STABLE_IMAGE"
  tags:
    - eks-platform-publish-docker

build_ci_latest_image:
  stage: build-ci-image
  rules:
    - changes:
      - shared/docker/latest/Dockerfile
  script:
    - docker build --pull --tag "$LATEST_IMAGE" ./shared/docker/latest
    - docker push "$LATEST_IMAGE"
  tags:
    - eks-platform-publish-docker

build:
  <<: *yarn-install-and-build
  stage: build-test-lint
  tags:
    - default-gitlab-runner
  image: $STABLE_IMAGE
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - bash commit_lint.sh
    - lerna run build
    - lerna run lint
    - lerna run coverage-ci
  artifacts:
    paths:
      - ./packages/**/lib

build-no-lockfile:
  stage: build-test-lint
  tags:
    - default-gitlab-runner
  image: $STABLE_IMAGE
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - packages/astro/**/*
  script:
    - yarn --no-lockfile --ignore-engines
    - lerna run build

backstop:
  <<: *yarn-install-and-build
  stage: screenshot
  tags:
    - default-gitlab-runner
  image: $STABLE_IMAGE
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - packages/ui-library/**/*
  script:
    - lerna run demo --scope ui-library
    - lerna run backstop-ci

manual_chromatic:
  stage: screenshot
  tags:
    - default-gitlab-runner
  image: $STABLE_IMAGE
  rules:
    # Required manual trigger for merge requests against master or develop
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|develop)/'
      changes:
        - packages/astro/**/*
      when: manual
      allow_failure: false
    # Optional manual trigger for merge requests against branches other than master and develop
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME !~ /^(master|develop)/'
      changes:
        - packages/astro/**/*
      when: manual
      allow_failure: true
  script:
    - lerna run chromatic -- --project-token=$CHROMATIC_PROJECT_TOKEN --build-script-name demo --scope astro

auto_accept_chromatic:
  stage: screenshot
  tags:
    - default-gitlab-runner
  image: $STABLE_IMAGE
  rules:
    # Run automatically for commits on develop and master
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "master"'
      changes:
        - packages/astro/**/*
  script:
    # Auto accept all changes for these branches
    - lerna run chromatic -- --auto-accept-changes --project-token=$CHROMATIC_PROJECT_TOKEN --build-script-name demo --scope astro

deploy_prerelease:
  stage: deploy
  tags:
    - default-gitlab-runner
  image: $STABLE_IMAGE
  rules:
    # Deploy develop and release branches via Jenkins API *UNLESS* the last commit was
    # made from the Jenkins bot. This avoids failed builds and possible loops due to push-based
    # webhooks.
    - if: '$CI_COMMIT_AUTHOR !~ /^devtools-jenkins.*/ && ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH =~ /^release\/.+/ || $CI_COMMIT_BRANCH == "master")'
  script:
    - curl -X POST -u "elijahcooper:$JENKINS_API_TOKEN" "https://jenkins-icecream.pingdev.tools/job/PingOne/job/UI-Library/job/pingux-monorepo-build/job/$CI_COMMIT_BRANCH/build"

deploy_release:
  stage: deploy
  tags:
    - default-gitlab-runner
  image: $STABLE_IMAGE
  rules:
    # Deploy master branch via Jenkins API *UNLESS* the last commit was made from the Jenkins bot.
    # This avoids failed builds and possible loops due to push-based webhooks.
    - if: '$CI_COMMIT_AUTHOR !~ /^devtools-jenkins.*/ && $CI_COMMIT_BRANCH == "master"'
  script:
    - curl -X POST -u "elijahcooper:$JENKINS_API_TOKEN" "https://jenkins-icecream.pingdev.tools/job/devtools-controlled-pipelines/job/PingOne/job/UI-Library/job/generic-release/build"