import _ from "underscore";
import React from "react";
import togglesOpen from "../togglesOpen";
import TestUtils from "../../../testutil/TestUtils";
import ReactTestUtils from "react-dom/test-utils";

const TestComponent = togglesOpen(
    ({ open, onOpen, onClose, onToggle }) => (
        <div>
            <a data-id="open" onClick={onOpen}>Open</a>
            <a data-id="close" onClick={onClose}>Close</a>
            <a data-id="toggle" onClick={onToggle}>Toggle</a>
            {open &&
                <div data-id="content">
                    hi there
                </div>
            }
        </div>
    )
);

describe("togglesOpen", function () {

    function getComponent (customProps) {
        const props = _.defaults(customProps, {
            open: true,
        });
        return ReactTestUtils.renderIntoDocument(<TestComponent {...props} />);
    }

    it("should trigger the open and close callbacks", function () {
        const openCallback = jest.genMockFunction();
        const closeCallback = jest.genMockFunction();
        
        const component = getComponent({
            onOpen: openCallback,
            onClose: closeCallback,
        });

        const openLink = TestUtils.findRenderedDOMNodeWithDataId(component, "open");
        const closeLink = TestUtils.findRenderedDOMNodeWithDataId(component, "close");

        expect(openCallback).not.toBeCalled();
        expect(closeCallback).not.toBeCalled();

        ReactTestUtils.Simulate.click(openLink);
        expect(openCallback).toBeCalled();
        ReactTestUtils.Simulate.click(closeLink);
        expect(closeCallback).toBeCalled();

        expect(TestUtils.checkForDataIds(component, ["content"])).toBeTruthy();
    });

    it("should trigger the toggle callback", function () {
        const callback = jest.genMockFunction();
        
        const component = getComponent({
            onToggle: callback,
        });

        const toggleLink = TestUtils.findRenderedDOMNodeWithDataId(component, "toggle");

        expect(callback).not.toBeCalled();
        ReactTestUtils.Simulate.click(toggleLink);
        expect(callback).toBeCalled();
    });

    it("should trigger the toggle callback when closed", function () {
        const callback = jest.genMockFunction();
        
        const component = getComponent({
            onToggle: callback,
            open: false,
        });

        const toggleLink = TestUtils.findRenderedDOMNodeWithDataId(component, "toggle");

        expect(callback).not.toBeCalled();
        ReactTestUtils.Simulate.click(toggleLink);
        expect(callback).toBeCalled();
    });

    it("should trigger the close callback when toggling", function () {
        const callback = jest.genMockFunction();
        
        const component = getComponent({
            onClose: callback,
        });

        const toggleLink = TestUtils.findRenderedDOMNodeWithDataId(component, "toggle");

        expect(callback).not.toBeCalled();
        ReactTestUtils.Simulate.click(toggleLink);
        expect(callback).toBeCalled();
    });

    it("should trigger the open callback when toggling", function () {
        const callback = jest.genMockFunction();
        
        const component = getComponent({
            onOpen: callback,
            open: false,
        });

        const toggleLink = TestUtils.findRenderedDOMNodeWithDataId(component, "toggle");

        expect(callback).not.toBeCalled();
        ReactTestUtils.Simulate.click(toggleLink);
        expect(callback).toBeCalled();
    });

    it("should only trigger the toggle callback opening", function () {
        const callback = jest.genMockFunction();
        
        const component = getComponent({
            onToggle: callback,
            open: false,
        });

        const openLink = TestUtils.findRenderedDOMNodeWithDataId(component, "open");
        const closeLink = TestUtils.findRenderedDOMNodeWithDataId(component, "close");

        expect(callback).not.toBeCalled();
        ReactTestUtils.Simulate.click(closeLink);
        expect(callback).not.toBeCalled();
        ReactTestUtils.Simulate.click(openLink);
        expect(callback).toBeCalled();
    });

    it("should only trigger the toggle callback closing", function () {
        const callback = jest.genMockFunction();
        
        const component = getComponent({
            onToggle: callback,
        });

        const openLink = TestUtils.findRenderedDOMNodeWithDataId(component, "open");
        const closeLink = TestUtils.findRenderedDOMNodeWithDataId(component, "close");

        expect(callback).not.toBeCalled();
        ReactTestUtils.Simulate.click(openLink);
        expect(callback).not.toBeCalled();
        ReactTestUtils.Simulate.click(closeLink);
        expect(callback).toBeCalled();
    });

});