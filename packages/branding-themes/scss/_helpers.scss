@import '../build/css/variables';

/// Fetch nested keys
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Keys to fetch
/// @return {*}
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
      }

    @return $map;
}

// Get colors for theme
@function getThemeColors($theme) {
    @return map-deep-get($themes,  $theme, 'color');
}

// Get images for theme
@function getThemeImages($theme) {
    @return map-deep-get($themes, $theme, 'image');
}

// Baseline styles for every theme; vars should only be used in this
// It's up to the themes to disable these via things like border-width: 0
// This allows for standardization for over-writing theme styles in the client
@mixin base($images, $colors) {
    body, html, .page {
        height: auto;
    }

    body__content, html__content, .page__content {
        height: 100%;
    }

    .page {
        /**
         * Note: Using !important to override .page defaults in end-user.css
         */
        @if type-of($images) == 'map' {
            background-image: url(map-get($images, 'background')) !important;
        } @else {
            background: map-get($colors, 'background') !important;
        }
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    .card {
        background: map-get($colors, 'card');
    }

    .branding-template-heading {
        color: map-get($colors, 'headingText');
    }

    .text-input {
        border-color: map-get($colors, 'button');
    }

    .branding-template-user-card {
        background-color: #fff !important;

        &:hover {
            border-color: map-get($colors, 'link') !important;
        }
    }

    .branding-template-primary-text {
        color: map-get($colors, 'bodyText');
    }

    .branding-template-link-container {
        color: map-get($colors, 'bodyText');
    }

    .branding-template-logo-container {
        border-color: map-get($colors, 'background');
    }

    .branding-template-primary-button {
        color: map-get($colors, 'buttonText');
        background: map-get($colors, 'button');
        border-color: map-get($colors, 'button');

        &:hover {
            color: map-get($colors, 'buttonText');
        }

        &:active {
            background-color: map-get($colors, 'button');
        }

        &:disabled {
            opacity: 0.2 !important;
        }
    }

    .branding-template-tertiary-button {
        color: map-get($colors, 'bodyText');
        border-color: map-get($colors, 'bodyText');
        background: transparent;

        &:hover {
            color: map-get($colors, 'link');
        }
    }

    .branding-template-link-text, a {
        color: map-get($colors, 'link');
    }
}